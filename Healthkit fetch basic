import HealthKit

class HealthKitService {
    let healthStore = HKHealthStore()
    
    // 읽기 및 쓰기 권한 설정
    let read = Set([HKCategoryType.categoryType(forIdentifier: .sleepAnalysis)!])
    let share = Set([HKCategoryType.categoryType(forIdentifier: .sleepAnalysis)!])
    
    func configure() {
        // 해당 장치가 healthkit을 지원하는지 여부
        if HKHealthStore.isHealthDataAvailable() {
            requestAuthorization()
        }
    }
    
    // 권한 요청 메소드
    private func requestAuthorization() {
        self.healthStore.requestAuthorization(toShare: share, read: read) { success, error in
            if error != nil {
                print(error.debugDescription)
            }else{
                if success {
                    print("권한이 허락되었습니다")
                }else{
                    print("권한이 없습니다")
                }
            }
        }
    }
}

// 권한 확인

func requestHealthKitAuthorization() {
    let healthKitTypesToRead: Set<HKObjectType> = [
        HKObjectType.quantityType(forIdentifier: .heartRateVariabilitySDNN)!
    ]

    healthStore.requestAuthorization(toShare: nil, read: healthKitTypesToRead) { (success, error) in
        if !success {
            print("Failed to request authorization for HealthKit.")
        }
    }
}

//심박 변이 데이터 읽어오기
func readHRVData() {
    guard let hrvType = HKObjectType.quantityType(forIdentifier: .heartRateVariabilitySDNN) else {
        print("HRV data type is not available.")
        return
    }

    let query = HKSampleQuery(sampleType: hrvType, predicate: nil, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { (query, results, error) in
        guard let samples = results as? [HKQuantitySample] else {
            print("No HRV data available.")
            return
        }

        for sample in samples {
            let hrvValue = sample.quantity.doubleValue(for: HKUnit(from: "ms"))
            print("HRV value: \(hrvValue)")

            // 여기서부터는 HRV 데이터를 기반으로 스트레스 수치를 계산하고 처리?
        }
    }

    healthStore.execute(query)
}

//예시

func calculateStressLevel(from hrvData: [Double]) -> Double {
    // 여기서 HRV 데이터를 기반으로 스트레스 수치를 계산하는 알고리즘
    // 예를 들어, HRV 데이터의 평균 값을 사용하여 스트레스 수치를 계산할 수 있습니다
    let averageHRV = hrvData.reduce(0, +) / Double(hrvData.count)
    let stressLevel = // 스트레스 수치 계산 알고리즘 적용

    return stressLevel
}


func calculateStressLevel(sdnn: Double, rmssd: Double, lfToHfRatio: Double) -> Double {
    // SDNN과 RMSSD가 높을수록 스트레스 수준이 낮음
    // LF/HF 비율이 높을수록 스트레스 수준이 높음
    
    // 여기서는 간단히 SDNN과 RMSSD의 평균을 구하고, LF/HF 비율을 반영하여 스트레스 수준을 계산 example
    let meanHRV = (sdnn + rmssd) / 2.0
    let stressLevel = meanHRV * (1.0 + lfToHfRatio)

    return stressLevel
}
